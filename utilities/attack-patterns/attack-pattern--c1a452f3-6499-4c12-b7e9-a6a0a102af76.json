{
    "objects": [
        {
            "name": "Process Doppelg\u00e4nging",
            "description": "Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)\n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)\n\nAdversaries may leverage TxF to a perform a file-less variation of Process Injection called Process Doppelg\u00e4nging. Similar to Process Hollowing, Process Doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process Doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)\n\nProcess Doppelg\u00e4nging is implemented in 4 steps (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017):\n* Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load \u2013 Create a shared section of memory and load the malicious executable.\n* Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate \u2013 Create a process from the tainted section of memory and initiate execution.\n\nDetection: Monitor and analyze calls to CreateTranscation, CreateFileTransacted, RollbackTransaction, and other rarely used functions indicative of TxF activity. Process Doppelg\u00e4nging also invokes an outdated and undocumented implementation of the Windows process loader via calls to NtCreateProcessEx and NtCreateThreadEx as well as API calls used to modify memory within another process, such as WriteProcessMemory. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017) (Citation: hasherezade Process Doppelg\u00e4nging Dec 2017)\n\nScan file objects reported during the PsSetCreateProcessNotifyRoutine, (Citation: Microsoft PsSetCreateProcessNotifyRoutine routine) which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017) Also consider comparing file objects loaded in memory to the corresponding file on disk. (Citation: hasherezade Process Doppelg\u00e4nging Dec 2017)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\n\nPlatforms: Windows\n\nData Sources: API monitoring, Process Monitoring\n\nDefense Bypassed: Process whitelisting, Anti-virus, Whitelisting by file name or path, Signature-based detection\n\nPermissions Required: User, Administrator, SYSTEM",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "defense-evasion"
                }
            ],
            "external_references": [
                {
                    "url": "https://attack.mitre.org/wiki/Technique/T1186",
                    "source_name": "mitre-attack",
                    "external_id": "T1186"
                },
                {
                    "description": "Microsoft. (n.d.). Transactional NTFS (TxF). Retrieved December 20, 2017.",
                    "source_name": "Microsoft TxF",
                    "url": "https://msdn.microsoft.com/library/windows/desktop/bb968806.aspx"
                },
                {
                    "description": "Microsoft. (n.d.). Basic TxF Concepts. Retrieved December 20, 2017.",
                    "source_name": "Microsoft Basic TxF Concepts",
                    "url": "https://msdn.microsoft.com/library/windows/desktop/dd979526.aspx"
                },
                {
                    "description": "Microsoft. (n.d.). When to Use Transactional NTFS. Retrieved December 20, 2017.",
                    "source_name": "Microsoft Where to use TxF",
                    "url": "https://msdn.microsoft.com/library/windows/desktop/aa365738.aspx"
                },
                {
                    "description": "Liberman, T. & Kogan, E. (2017, December 7). Lost in Transaction: Process Doppelg\u00e4nging. Retrieved December 20, 2017.",
                    "source_name": "BlackHat Process Doppelg\u00e4nging Dec 2017",
                    "url": "https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf"
                },
                {
                    "description": "hasherezade. (2017, December 18). Process Doppelg\u00e4nging \u2013 a new way to impersonate a process. Retrieved December 20, 2017.",
                    "source_name": "hasherezade Process Doppelg\u00e4nging Dec 2017",
                    "url": "https://hshrzd.wordpress.com/2017/12/18/process-doppelganging-a-new-way-to-impersonate-a-process/"
                },
                {
                    "description": "Microsoft. (n.d.). PsSetCreateProcessNotifyRoutine routine. Retrieved December 20, 2017.",
                    "source_name": "Microsoft PsSetCreateProcessNotifyRoutine routine",
                    "url": "https://msdn.microsoft.com/library/windows/hardware/ff559951.aspx"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "created": "2018-01-16T16:13:52.465Z",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "x_mitre_platforms": [
                "Windows"
            ],
            "x_mitre_data_sources": [
                "API monitoring",
                "Process Monitoring"
            ],
            "x_mitre_defense_bypassed": [
                "Process whitelisting",
                "Anti-virus",
                "Whitelisting by file name or path",
                "Signature-based detection"
            ],
            "x_mitre_permissions_required": [
                "User",
                "Administrator",
                "SYSTEM"
            ],
            "id": "attack-pattern--c1a452f3-6499-4c12-b7e9-a6a0a102af76",
            "modified": "2018-04-18T17:59:24.739Z",
            "type": "attack-pattern"
        }
    ],
    "type": "bundle",
    "id": "bundle--eb24e282-e421-416f-b2f8-ecc54d1836fb",
    "spec_version": "2.0"
}